# Docker Compose for Telegram Reminder Bot
# Development and production configurations

version: '3.8'

services:
  # Main bot service
  reminder-bot:
    build: .
    container_name: telegram-reminder-bot
    restart: unless-stopped
    
    # Environment configuration
    environment:
      - BOT_TOKEN=${BOT_TOKEN}
      - DATABASE_PATH=/app/data/reminders.db
      - LOG_FILE=/app/logs/bot.log
      - LOG_LEVEL=INFO
      - SCHEDULER_TIMEZONE=UTC
      - ENVIRONMENT=production
    
    # Volume mounts
    volumes:
      - bot_data:/app/data
      - bot_logs:/app/logs
      - ./src:/app/src:ro  # Mount source code (development only)
    
    # Network configuration
    networks:
      - bot_network
    
    # Health check
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'

  # Redis service (optional - for future use)
  redis:
    image: redis:7-alpine
    container_name: reminder-bot-redis
    restart: unless-stopped
    
    # Redis configuration
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    
    # Volume for persistence
    volumes:
      - redis_data:/data
    
    # Network
    networks:
      - bot_network
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
    
    # Only start if needed
    profiles:
      - redis

  # PostgreSQL service (optional - for scaling)
  postgres:
    image: postgres:15-alpine
    container_name: reminder-bot-postgres
    restart: unless-stopped
    
    # PostgreSQL configuration
    environment:
      - POSTGRES_DB=reminder_bot
      - POSTGRES_USER=bot_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-bot_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    
    # Volume for persistence
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    
    # Network
    networks:
      - bot_network
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bot_user -d reminder_bot"]
      interval: 10s
      timeout: 5s
      retries: 5
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
    
    # Only start if needed
    profiles:
      - postgres

  # Monitoring service (optional)
  monitoring:
    image: prom/prometheus:latest
    container_name: reminder-bot-monitoring
    restart: unless-stopped
    
    # Configuration
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    
    # Volumes
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    
    # Network
    networks:
      - bot_network
    
    # Ports
    ports:
      - "9090:9090"
    
    # Only start if needed
    profiles:
      - monitoring

# Named volumes for data persistence
volumes:
  bot_data:
    driver: local
  bot_logs:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local

# Custom network
networks:
  bot_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16