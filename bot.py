import asyncio
import logging
import os
import sqlite3
import re
from datetime import datetime, timedelta
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ .env!")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
scheduler = AsyncIOScheduler()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ReminderStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_time = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    conn = sqlite3.connect('reminders.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS reminders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            username TEXT,
            first_name TEXT,
            reminder_text TEXT NOT NULL,
            reminder_time TEXT NOT NULL,
            created_at TEXT NOT NULL,
            is_sent INTEGER DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# –ü–∞—Ä—Å–µ—Ä –≤—Ä–µ–º–µ–Ω–∏
def parse_time(time_str: str) -> datetime:
    """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ datetime –æ–±—ä–µ–∫—Ç"""
    time_str = time_str.lower().strip()
    now = datetime.now()
    
    # –ü–æ–∏—Å–∫ —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ
    number_match = re.search(r'\d+', time_str)
    if not number_match:
        raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫–µ –≤—Ä–µ–º–µ–Ω–∏")
    
    number = int(number_match.group())
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –≤—Ä–µ–º–µ–Ω–∏
    if any(word in time_str for word in ['–º–∏–Ω—É—Ç', '–º–∏–Ω', 'min', 'minute']):
        return now + timedelta(minutes=number)
    elif any(word in time_str for word in ['—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤', 'hour', 'hours']):
        return now + timedelta(hours=number)
    elif any(word in time_str for word in ['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π', 'day', 'days']):
        return now + timedelta(days=number)
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –º–∏–Ω—É—Ç—ã
        return now + timedelta(minutes=number)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_reminder(user_id: int, reminder_text: str, reminder_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        await bot.send_message(
            user_id, 
            f"üîî **–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï!**\n\nüìù {reminder_text}\n\n‚è∞ {datetime.now().strftime('%H:%M')}"
        )
        
        # –û—Ç–º–µ—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
        conn = sqlite3.connect('reminders.db')
        cursor = conn.cursor()
        cursor.execute('UPDATE reminders SET is_sent = 1 WHERE id = ?', (reminder_id,))
        conn.commit()
        conn.close()
        
        logger.info(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="create_reminder")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="my_reminders")],
        [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="clear_all")],
        [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ])

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_name = message.from_user.first_name or "–¥—Ä—É–≥"
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, **{user_name}**!\n\n"
        "ü§ñ –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞! –ü–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã—Ç—å –≤–∞–∂–Ω—ã–µ –¥–µ–ª–∞.\n\n"
        "üéØ **–ß—Ç–æ —è —É–º–µ—é:**\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –ª—é–±–æ–µ –≤—Ä–µ–º—è\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ—á–Ω–æ –≤ —Å—Ä–æ–∫\n"
        "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        "‚Ä¢ –†–∞–±–æ—Ç–∞—Ç—å 24/7 –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu(),
        parse_mode="Markdown"
    )

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.callback_query(F.data == "create_reminder")
async def start_create_reminder(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    await callback.message.edit_text(
        "üìù **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
        "*(–Ω–∞–ø—Ä–∏–º–µ—Ä: \"–ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ\" –∏–ª–∏ \"–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º\")*",
        parse_mode="Markdown"
    )
    await state.set_state(ReminderStates.waiting_for_text)

# –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
@dp.callback_query(F.data == "my_reminders")
async def show_my_reminders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    
    conn = sqlite3.connect('reminders.db')
    cursor = conn.cursor()
    cursor.execute(
        'SELECT id, reminder_text, reminder_time, is_sent FROM reminders WHERE user_id = ? ORDER BY reminder_time',
        (user_id,)
    )
    reminders = cursor.fetchall()
    conn.close()
    
    if not reminders:
        await callback.message.edit_text(
            "üì≠ **–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π**\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!",
            reply_markup=main_menu(),
            parse_mode="Markdown"
        )
        return
    
    text = "üìã **–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:**\n\n"
    for i, (reminder_id, reminder_text, reminder_time, is_sent) in enumerate(reminders, 1):
        status = "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" if is_sent else "‚è≥ –û–∂–∏–¥–∞–µ—Ç"
        try:
            dt = datetime.fromisoformat(reminder_time)
            time_formatted = dt.strftime('%d.%m.%Y –≤ %H:%M')
        except:
            time_formatted = reminder_time
        
        text += f"{i}. **{reminder_text}**\n"
        text += f"   ‚è∞ {time_formatted}\n"
        text += f"   {status}\n\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]),
        parse_mode="Markdown"
    )

# –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
@dp.callback_query(F.data == "clear_all")
async def confirm_clear_all(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    await callback.message.edit_text(
        "üóë **–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π**\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï —Å–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="confirm_clear")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_menu")]
        ]),
        parse_mode="Markdown"
    )

@dp.callback_query(F.data == "confirm_clear")
async def clear_all_reminders(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    
    conn = sqlite3.connect('reminders.db')
    cursor = conn.cursor()
    cursor.execute('DELETE FROM reminders WHERE user_id = ?', (user_id,))
    deleted_count = cursor.rowcount
    conn.commit()
    conn.close()
    
    await callback.message.edit_text(
        f"‚úÖ **–ì–æ—Ç–æ–≤–æ!**\n\n–£–¥–∞–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: **{deleted_count}**",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]),
        parse_mode="Markdown"
    )

# –ü–æ–º–æ—â—å
@dp.callback_query(F.data == "help")
async def show_help(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏"""
    await callback.message.edit_text(
        "‚ùì **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**\n\n"
        "üî∏ **–§–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏:**\n"
        "‚Ä¢ `—á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç`\n"
        "‚Ä¢ `—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞`\n" 
        "‚Ä¢ `—á–µ—Ä–µ–∑ 3 –¥–Ω—è`\n\n"
        "üî∏ **–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**\n"
        "‚Ä¢ –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ ‚Üí —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç\n"
        "‚Ä¢ –í—Å—Ç—Ä–µ—á–∞ —Å –≤—Ä–∞—á–æ–º ‚Üí —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞\n"
        "‚Ä¢ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –º–∞–º—ã ‚Üí —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π\n\n"
        "üí° **–°–æ–≤–µ—Ç:** –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 –∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–±—É–¥–µ—Ç –Ω–∞–ø–æ–º–Ω–∏—Ç—å –≤–∞–º!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]),
        parse_mode="Markdown"
    )

# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query(F.data == "back_to_menu")
async def back_to_main_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_name = callback.from_user.first_name or "–¥—Ä—É–≥"
    await callback.message.edit_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, **{user_name}**!\n\n"
        "ü§ñ –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu(),
        parse_mode="Markdown"
    )

# FSM: –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.message(ReminderStates.waiting_for_text)
async def get_reminder_text(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    await state.update_data(reminder_text=message.text)
    
    await message.answer(
        "‚è∞ **–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å?**\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–∞:\n"
        "‚Ä¢ `—á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç`\n"
        "‚Ä¢ `—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞`\n"
        "‚Ä¢ `—á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å`\n\n"
        "üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–≥–¥–∞ –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å:",
        parse_mode="Markdown"
    )
    await state.set_state(ReminderStates.waiting_for_time)

# FSM: –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.message(ReminderStates.waiting_for_time)
async def get_reminder_time(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    try:
        data = await state.get_data()
        reminder_text = data['reminder_text']
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏
        reminder_time = parse_time(message.text)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
        if reminder_time <= datetime.now():
            await message.answer(
                "‚ö†Ô∏è **–û—à–∏–±–∫–∞!**\n\n"
                "–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                parse_mode="Markdown"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('reminders.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO reminders (user_id, username, first_name, reminder_text, reminder_time, created_at)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (
            message.from_user.id,
            message.from_user.username or "",
            message.from_user.first_name or "",
            reminder_text,
            reminder_time.isoformat(),
            datetime.now().isoformat()
        ))
        reminder_id = cursor.lastrowid
        conn.commit()
        conn.close()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler.add_job(
            send_reminder,
            'date',
            run_date=reminder_time,
            args=[message.from_user.id, reminder_text, reminder_id],
            id=f"reminder_{reminder_id}",
            replace_existing=True
        )
        
        await message.answer(
            "‚úÖ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!**\n\n"
            f"üìù **–¢–µ–∫—Å—Ç:** {reminder_text}\n"
            f"‚è∞ **–í—Ä–µ–º—è:** {reminder_time.strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
            f"üîî –Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º —Ç–æ—á–Ω–æ –≤ —Å—Ä–æ–∫!",
            reply_markup=main_menu(),
            parse_mode="Markdown"
        )
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {message.from_user.id}: {reminder_text} –Ω–∞ {reminder_time}")
        
    except Exception as e:
        await message.answer(
            "‚ùå **–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤—Ä–µ–º–µ–Ω–∏!**\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ `—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç`\n" 
            "‚Ä¢ `—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞`\n"
            "‚Ä¢ `—á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å`",
            parse_mode="Markdown"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ '{message.text}': {e}")
        return
    
    await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(
        "‚ùì **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é",
        parse_mode="Markdown"
    )

# –ó–∞–≥—Ä—É–∑–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
def load_pending_reminders():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –ë–î –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    conn = sqlite3.connect('reminders.db')
    cursor = conn.cursor()
    cursor.execute(
        'SELECT id, user_id, reminder_text, reminder_time FROM reminders WHERE is_sent = 0'
    )
    reminders = cursor.fetchall()
    conn.close()
    
    count = 0
    for reminder_id, user_id, reminder_text, reminder_time in reminders:
        try:
            reminder_dt = datetime.fromisoformat(reminder_time)
            
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ
            if reminder_dt > datetime.now():
                scheduler.add_job(
                    send_reminder,
                    'date',
                    run_date=reminder_dt,
                    args=[user_id, reminder_text, reminder_id],
                    id=f"reminder_{reminder_id}",
                    replace_existing=True
                )
                count += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder_id}: {e}")
    
    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {count} –æ–∂–∏–¥–∞—é—â–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    init_db()
    
    logger.info("‚è∞ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
    scheduler.start()
    
    logger.info("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
    load_pending_reminders()
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    await dp.start_polling(bot, skip_updates=True)

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")