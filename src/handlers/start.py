"""
Start Handlers Module

Command handlers for /start, /help, and basic bot commands.
"""

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.filters.command import CommandStart
from aiogram.fsm.context import FSMContext

from src.database.operations import get_session, UserOperations
from src.utils.keyboards import main_menu_keyboard, help_keyboard, back_to_menu_keyboard
from src.utils.formatters import format_help_message

logger = logging.getLogger(__name__)
router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """Handle /start command."""
    await state.clear()  # Clear any existing state
    
    user = message.from_user
    user_name = user.first_name or "–¥—Ä—É–≥"
    
    try:
        async with get_session() as session:
            # Create or update user
            db_user = await UserOperations.create_or_update_user(
                session=session,
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
                language_code=user.language_code
            )
            
            logger.info(f"üë§ User {user.id} started bot (DB ID: {db_user.id})")
        
        welcome_message = (
            f"üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!**\n\n"
            "ü§ñ –Ø —É–º–Ω—ã–π –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞! –ü–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –≤–∞–∂–Ω—ã–µ –¥–µ–ª–∞.\n\n"
            "üéØ **–ß—Ç–æ —è —É–º–µ—é:**\n"
            "‚Ä¢ üìù –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —É–º–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
            "‚Ä¢ ‚è∞ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ—á–Ω–æ –≤ —Å—Ä–æ–∫\n"
            "‚Ä¢ üìã –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
            "‚Ä¢ üìä –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ üåç –†–∞–±–æ—Ç–∞—Ç—å –≤ –ª—é–±–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ\n\n"
            "üöÄ **–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:**\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ `–ù–∞–ø–æ–º–Ω–∏ –∫—É–ø–∏—Ç—å —Ö–ª–µ–± —á–µ—Ä–µ–∑ —á–∞—Å` –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ!\n\n"
            "üí° –Ø –ø–æ–Ω–∏–º–∞—é –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫ –∏ —Ä–∞–±–æ—Ç–∞—é 24/7!"
        )
        
        await message.answer(
            welcome_message,
            reply_markup=main_menu_keyboard(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"‚ùå Error in /start handler: {e}")
        await message.answer(
            "‚ùå **–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="Markdown"
        )


@router.message(Command(commands=["help"]))
async def cmd_help(message: Message):
    """Handle /help command."""
    help_text = format_help_message("main")
    
    await message.answer(
        help_text,
        reply_markup=help_keyboard(),
        parse_mode="Markdown"
    )


@router.callback_query(F.data == "help")
async def show_help_menu(callback: CallbackQuery):
    """Show help menu."""
    await callback.answer()
    
    help_text = format_help_message("main")
    
    await callback.message.edit_text(
        help_text,
        reply_markup=help_keyboard(),
        parse_mode="Markdown"
    )


@router.callback_query(F.data.startswith("help_"))
async def show_help_section(callback: CallbackQuery):
    """Show specific help section."""
    await callback.answer()
    
    section = callback.data.replace("help_", "")
    help_text = format_help_message(section)
    
    await callback.message.edit_text(
        help_text,
        reply_markup=back_to_menu_keyboard(),
        parse_mode="Markdown"
    )


@router.callback_query(F.data == "main_menu")
async def show_main_menu(callback: CallbackQuery, state: FSMContext):
    """Return to main menu."""
    await callback.answer()
    await state.clear()  # Clear any FSM state
    
    user_name = callback.from_user.first_name or "–¥—Ä—É–≥"
    
    message_text = (
        f"üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
        f"–ü—Ä–∏–≤–µ—Ç, **{user_name}**! –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?\n\n"
        "üí° –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–µ –∑–∞–±—ã—Ç—å!"
    )
    
    await callback.message.edit_text(
        message_text,
        reply_markup=main_menu_keyboard(),
        parse_mode="Markdown"
    )


@router.message(Command(commands=["stats"]))
async def cmd_stats(message: Message):
    """Handle /stats command."""
    try:
        async with get_session() as session:
            from src.database.operations import StatisticsOperations
            
            # Get user
            user = await UserOperations.get_user_by_telegram_id(
                session, message.from_user.id
            )
            
            if not user:
                await message.answer(
                    "‚ùå **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω**\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
                    parse_mode="Markdown"
                )
                return
            
            # Get statistics
            stats = await StatisticsOperations.get_user_statistics(session, user.id)
            
            if not stats:
                await message.answer(
                    "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞**\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!",
                    reply_markup=main_menu_keyboard(),
                    parse_mode="Markdown"
                )
                return
            
            from src.utils.formatters import format_user_statistics
            stats_text = format_user_statistics(stats)
            
            await message.answer(
                stats_text,
                reply_markup=main_menu_keyboard(),
                parse_mode="Markdown"
            )
            
    except Exception as e:
        logger.error(f"‚ùå Error in /stats handler: {e}")
        await message.answer(
            "‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            reply_markup=main_menu_keyboard(),
            parse_mode="Markdown"
        )


@router.callback_query(F.data == "show_stats")
async def show_stats_callback(callback: CallbackQuery):
    """Show statistics via callback."""
    await callback.answer()
    
    try:
        async with get_session() as session:
            from src.database.operations import StatisticsOperations
            
            # Get user
            user = await UserOperations.get_user_by_telegram_id(
                session, callback.from_user.id
            )
            
            if not user:
                await callback.message.edit_text(
                    "‚ùå **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω**\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
                    reply_markup=main_menu_keyboard(),
                    parse_mode="Markdown"
                )
                return
            
            # Get statistics
            stats = await StatisticsOperations.get_user_statistics(session, user.id)
            
            if not stats:
                await callback.message.edit_text(
                    "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞**\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!",
                    reply_markup=main_menu_keyboard(),
                    parse_mode="Markdown"
                )
                return
            
            from src.utils.formatters import format_user_statistics
            stats_text = format_user_statistics(stats)
            
            await callback.message.edit_text(
                stats_text,
                reply_markup=main_menu_keyboard(),
                parse_mode="Markdown"
            )
            
    except Exception as e:
        logger.error(f"‚ùå Error showing stats: {e}")
        await callback.message.edit_text(
            "‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            reply_markup=main_menu_keyboard(),
            parse_mode="Markdown"
        )


@router.message(Command(commands=["settings"]))
async def cmd_settings(message: Message):
    """Handle /settings command."""
    from src.utils.keyboards import settings_keyboard
    
    settings_text = (
        "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ –ø–æ–¥ —Å–µ–±—è:\n\n"
        "üåç **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å** - –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è** - –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å\n"
        "üóë **–£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö** - –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:"
    )
    
    await message.answer(
        settings_text,
        reply_markup=settings_keyboard(),
        parse_mode="Markdown"
    )


@router.callback_query(F.data == "settings")
async def show_settings_callback(callback: CallbackQuery):
    """Show settings via callback."""
    await callback.answer()
    
    from src.utils.keyboards import settings_keyboard
    
    settings_text = (
        "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ –ø–æ–¥ —Å–µ–±—è:\n\n"
        "üåç **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å** - –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è** - –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å\n"
        "üóë **–£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö** - –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:"
    )
    
    await callback.message.edit_text(
        settings_text,
        reply_markup=settings_keyboard(),
        parse_mode="Markdown"
    )


# Handle unknown commands
@router.message(Command(commands=["unknown"]))
async def unknown_command(message: Message):
    """Handle unknown commands."""
    await message.answer(
        "ü§∑‚Äç‚ôÇÔ∏è **–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞**\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ /start –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
        reply_markup=main_menu_keyboard(),
        parse_mode="Markdown"
    )


# Handle text messages (quick reminders)
@router.message(F.text)
async def handle_text_message(message: Message, state: FSMContext):
    """Handle plain text messages as potential quick reminders."""
    # Check if we're in any FSM state
    current_state = await state.get_state()
    if current_state:
        # Let other handlers process FSM states
        return
    
    text = message.text.strip()
    
    # Check for quick reminder patterns
    quick_patterns = [
        '–Ω–∞–ø–æ–º–Ω–∏', '–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', 'reminder', 'remind',
        '–Ω–µ –∑–∞–±—ã—Ç—å', '—á–µ—Ä–µ–∑', '–∑–∞–≤—Ç—Ä–∞', '—Å–µ–≥–æ–¥–Ω—è'
    ]
    
    if any(pattern in text.lower() for pattern in quick_patterns):
        # This looks like a quick reminder attempt
        from src.bot.states import ReminderStates
        
        await state.set_state(ReminderStates.quick_reminder)
        await state.update_data(original_message=text)
        
        # Process as quick reminder
        from src.handlers.reminders import process_quick_reminder
        await process_quick_reminder(message, state)
    else:
        # Generic help message
        await message.answer(
            "üëã **–ü—Ä–∏–≤–µ—Ç!**\n\n"
            "–Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ:\n\n"
            "‚Ä¢ `–ù–∞–ø–æ–º–Ω–∏ –∫—É–ø–∏—Ç—å —Ö–ª–µ–± —á–µ—Ä–µ–∑ —á–∞—Å`\n"
            "‚Ä¢ `–í—Å—Ç—Ä–µ—á–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 15:30`\n"
            "‚Ä¢ `–ù–µ –∑–∞–±—ã—Ç—å –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ`\n\n"
            "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            reply_markup=main_menu_keyboard(),
            parse_mode="Markdown"
        )
